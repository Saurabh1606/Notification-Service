spring:
  application:
    name: notification-system
  profiles:
    active: local

  datasource:
    url: jdbc:postgresql://localhost:5432/notification_system
    username: notif_user
    password: notif_pass
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  kafka:
    bootstrap-servers: kafka:29092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 3
      acks: all
    consumer:
      group-id: notification-workers
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: "com.notification.system.model"

  data:
    redis:
      host: redis
      port: 6379
      password: redis123
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5

server:
  port: 8000

management:
  tracing:
    enabled: false

  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: false

logging:
  level:
    com.notification.system: DEBUG
    org.springframework.kafka: INFO

# Provider configurations
notification:
  providers:
    email:
      sendgrid:
        api-key: ${SENDGRID_API_KEY:your-sendgrid-key}
        enabled: true
        rate-limit: 100
      mailgun:
        api-key: ${MAILGUN_API_KEY:your-mailgun-key}
        domain: ${MAILGUN_DOMAIN:your-domain.com}
        enabled: true
        rate-limit: 300
      mailhog:
        smtp-host: mailhog
        smtp-port: 1025
        enabled: true
        rate-limit: 1000
    push:
      fcm:
        server-key: ${FCM_SERVER_KEY:your-fcm-key}
        enabled: true
        rate-limit: 500
      apns:
        key-id: ${APNS_KEY_ID:your-apns-key-id}
        team-id: ${APNS_TEAM_ID:your-team-id}
        bundle-id: ${APNS_BUNDLE_ID:com.yourapp.bundle}
        enabled: true
        rate-limit: 300
    sms:
      twilio:
        account-sid: ${TWILIO_ACCOUNT_SID:your-twilio-sid}
        auth-token: ${TWILIO_AUTH_TOKEN:your-twilio-token}
        from-number: ${TWILIO_FROM_NUMBER:+1234567890}
        enabled: true
        rate-limit: 50
      mock:
        endpoint: http://localhost:8082/sms
        enabled: true
        rate-limit: 1000

# Worker pool configurations
worker:
  pools:
    high-priority:
      core-size: 20
      max-size: 40
      queue-capacity: 1000
    normal-priority:
      core-size: 10
      max-size: 20
      queue-capacity: 2000
    low-priority:
      core-size: 5
      max-size: 10
      queue-capacity: 5000

---
# Docker profile
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://${DB_HOST:postgres}:5432/${DB_NAME:notification_system}
    username: ${DB_USER:notif_user}
    password: ${DB_PASSWORD:notif_pass}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:29092}
  data:
    redis:
      host: ${REDIS_HOST:redis}
      password: ${REDIS_PASSWORD:redis123}
  flyway:
    enabled: false
notification:
  providers:
    email:
      mailhog:
        smtp-host: mailhog
        smtp-port: 1025
    sms:
      mock:
        endpoint: http://mock-sms/sms

